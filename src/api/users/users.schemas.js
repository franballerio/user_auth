import { z } from 'zod'

const UserRole = z.enum(['ADMIN', 'USER', 'GUEST'])

const emailSchema = z.email({ message: 'Invalid email address.' })
const user_nameSchema = z.string().min(0).max(20)

export const login = z.object({

  credential: z.union([emailSchema, user_nameSchema]),

  password: z.string()
    .min(8, { message: 'Password must be at least 8 characters long.' })
    .regex(/^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$/, {
      message: 'Password must contain at least one letter and one number.'
    }),

  //   role: UserRole.default('USER'), // Default role to 'USER' if not provided

  createdAt: z.date().default(() => new Date()),
  updatedAt: z.date().default(() => new Date())
})

export const register = z.object({
  // We expect a UUID generated by the database (e.g., by Prisma or the DB itself).
//   id: z.uuid({ message: "Invalid UUID" }),

  //   username: z.string()
  //     .min(3, { message: "Username must be at least 3 characters long." })
  //     .max(50, { message: "Username cannot be longer than 50 characters." })
  //     .regex(/^[a-zA-Z0-9_]+$/, { message: "Username can only contain letters, numbers, and underscores." }),

  email: z.email({ message: 'Invalid email address.' }),

  user_name: z.string().min(0).max(20),

  password: z.string()
    .min(8, { message: 'Password must be at least 8 characters long.' })
    .regex(/^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$/, {
      message: 'Password must contain at least one letter and one number.'
    }),

  //   role: UserRole.default('USER'), // Default role to 'USER' if not provided

  createdAt: z.date().default(() => new Date()),
  updatedAt: z.date().default(() => new Date())
})

export function validateLogin (data) {
  const result = login.safeParse(data)
  return result
}

export function validateRegister (data) {
  const result = register.safeParse(data)
  return result
}

export function zodError(error) {
  return (
    z.treeifyError(error).properties?.email?.errors || 
    z.treeifyError(error).properties?.user_name?.errors ||
    z.treeifyError(error).properties?.credential?.errors ||
    z.treeifyError(error).properties?.password?.errors 
  )
}

